From 1798efe5fd171974a5e6376d5979e4b9dcb0d594 Mon Sep 17 00:00:00 2001
From: Michael Natterer <mitch@gimp.org>
Date: Fri, 23 Mar 2012 16:28:38 +0100
Subject: [PATCH 5/5] gtk: connect to GdkWindow::native-child-event to
 implement click-to-focus

and also make focus handling generally work much better.
---
 gtk/gtknsview.c |  121 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 119 insertions(+), 2 deletions(-)

diff --git a/gtk/gtknsview.c b/gtk/gtknsview.c
index 1e55865..2120914 100644
--- a/gtk/gtknsview.c
+++ b/gtk/gtknsview.c
@@ -24,6 +24,7 @@
 
 #include <gdk/gdk.h>
 #include <gdk/quartz/gdkquartz.h>
+#include <objc/runtime.h>
 
 #include "gtknsview.h"
 #include "gtkprivate.h"
@@ -31,6 +32,9 @@
 #include "gtkalias.h"
 
 
+/* #define DEBUG_FOCUS 1 */
+
+
 enum
 {
   PROP_0,
@@ -56,6 +60,8 @@ static void       gtk_ns_view_get_property  (GObject        *object,
                                              guint           prop_id,
                                              GValue         *value,
                                              GParamSpec     *pspec);
+static void       gtk_ns_view_notify        (GObject        *object,
+                                             GParamSpec     *pspec);
 
 static void       gtk_ns_view_map           (GtkWidget      *widget);
 static void       gtk_ns_view_unmap         (GtkWidget      *widget);
@@ -63,11 +69,17 @@ static void       gtk_ns_view_size_request  (GtkWidget      *widget,
                                              GtkRequisition *requisition);
 static void       gtk_ns_view_size_allocate (GtkWidget      *widget,
                                              GtkAllocation  *allocation);
+static void       gtk_ns_view_grab_focus    (GtkWidget      *widget);
 static gboolean   gtk_ns_view_key_press     (GtkWidget      *widget,
                                              GdkEventKey    *event);
 static gboolean   gtk_ns_view_key_release   (GtkWidget      *widget,
                                              GdkEventKey    *event);
 
+static void       gtk_ns_view_native_child_event (GdkWindow     *window,
+                                                  NSView        *view,
+                                                  NSEvent       *event,
+                                                  GtkNSView     *ns_view);
+
 
 G_DEFINE_TYPE (GtkNSView, gtk_ns_view, GTK_TYPE_WIDGET)
 
@@ -83,11 +95,13 @@ gtk_ns_view_class_init (GtkNSViewClass *klass)
   object_class->dispose = gtk_ns_view_dispose;
   object_class->set_property = gtk_ns_view_set_property;
   object_class->get_property = gtk_ns_view_get_property;
+  object_class->notify = gtk_ns_view_notify;
 
   widget_class->map = gtk_ns_view_map;
   widget_class->unmap = gtk_ns_view_unmap;
   widget_class->size_request = gtk_ns_view_size_request;
   widget_class->size_allocate = gtk_ns_view_size_allocate;
+  widget_class->grab_focus = gtk_ns_view_grab_focus;
   widget_class->key_press_event = gtk_ns_view_key_press;
   widget_class->key_release_event = gtk_ns_view_key_release;
 
@@ -146,6 +160,12 @@ gtk_ns_view_set_property (GObject      *object,
           [ns_view->priv->view retain];
           gtk_widget_set_can_focus (GTK_WIDGET (ns_view),
                                     [ns_view->priv->view acceptsFirstResponder]);
+
+#if DEBUG_FOCUS
+          g_printerr ("%s can focus: %d\n",
+                      class_getName ([ns_view->priv->view class]),
+                      gtk_widget_get_can_focus (GTK_WIDGET (ns_view)));
+#endif
         }
       break;
 
@@ -176,6 +196,32 @@ gtk_ns_view_get_property (GObject      *object,
 }
 
 static void
+gtk_ns_view_notify (GObject    *object,
+                    GParamSpec *pspec)
+{
+  GtkNSView *ns_view = GTK_NS_VIEW (object);
+
+  if (G_OBJECT_CLASS (gtk_ns_view_parent_class)->notify)
+    G_OBJECT_CLASS (gtk_ns_view_parent_class)->notify (object, pspec);
+
+  if (!strcmp (pspec->name, "has-focus"))
+    {
+      NSWindow *ns_window = [ns_view->priv->view window];
+
+#if DEBUG_FOCUS
+      g_printerr ("%s has-focus: %d\n",
+                  class_getName ([ns_view->priv->view class]),
+                  gtk_widget_has_focus (GTK_WIDGET (object)));
+#endif
+
+      if (gtk_widget_has_focus (GTK_WIDGET (object)))
+        [ns_window makeFirstResponder:ns_view->priv->view];
+      else
+        [ns_window makeFirstResponder:nil];
+    }
+}
+
+static void
 gtk_ns_view_position_view (GtkNSView     *ns_view,
                            GtkAllocation *allocation)
 {
@@ -211,6 +257,7 @@ static void
 gtk_ns_view_map (GtkWidget *widget)
 {
   GtkNSView *ns_view = GTK_NS_VIEW (widget);
+  GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
   GtkAllocation allocation;
   NSView *parent_view;
 
@@ -220,6 +267,12 @@ gtk_ns_view_map (GtkWidget *widget)
   parent_view = gdk_quartz_window_get_nsview (gtk_widget_get_window (widget));
   [parent_view addSubview:ns_view->priv->view];
 
+  [ns_view->priv->view setNextKeyView:nil];
+
+  g_signal_connect (gtk_widget_get_window (toplevel), "native-child-event",
+                    G_CALLBACK (gtk_ns_view_native_child_event),
+                    widget);
+
   GTK_WIDGET_CLASS (gtk_ns_view_parent_class)->map (widget);
 }
 
@@ -227,6 +280,11 @@ static void
 gtk_ns_view_unmap (GtkWidget *widget)
 {
   GtkNSView *ns_view = GTK_NS_VIEW (widget);
+  GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
+
+  g_signal_handlers_disconnect_by_func (gtk_widget_get_window (toplevel),
+                                        gtk_ns_view_native_child_event,
+                                        widget);
 
   [ns_view->priv->view removeFromSuperview];
 
@@ -253,16 +311,32 @@ gtk_ns_view_size_allocate (GtkWidget     *widget,
     gtk_ns_view_position_view (ns_view, allocation);
 }
 
+static void
+gtk_ns_view_grab_focus (GtkWidget *widget)
+{
+  GtkNSView *ns_view = GTK_NS_VIEW (widget);
+  NSWindow *ns_window;
+
+  GTK_WIDGET_CLASS (gtk_ns_view_parent_class)->grab_focus (widget);
+
+  ns_window = [ns_view->priv->view window];
+  [ns_window makeFirstResponder:ns_view->priv->view];
+}
+
 static gboolean
 gtk_ns_view_key_press (GtkWidget   *widget,
                        GdkEventKey *event)
 {
   GtkNSView *ns_view = GTK_NS_VIEW (widget);
   NSEvent *nsevent = gdk_quartz_event_get_nsevent ((GdkEvent *) event);
+  NSWindow *ns_window;
 
   /* FIXME: why doesn't cursor navigation work? */
 
-  return [ns_view->priv->view performKeyEquivalent:nsevent];
+  ns_window = [ns_view->priv->view window];
+  [ns_window sendEvent:nsevent];
+
+  return TRUE;
 }
 
 static gboolean
@@ -271,10 +345,53 @@ gtk_ns_view_key_release (GtkWidget   *widget,
 {
   GtkNSView *ns_view = GTK_NS_VIEW (widget);
   NSEvent *nsevent = gdk_quartz_event_get_nsevent ((GdkEvent *) event);
+  NSWindow *ns_window;
 
   /* FIXME: see press */
 
-  return [ns_view->priv->view performKeyEquivalent:nsevent];
+  ns_window = [ns_view->priv->view window];
+  [ns_window sendEvent:nsevent];
+
+  return TRUE;
+}
+
+static void
+gtk_ns_view_native_child_event (GdkWindow *window,
+                                NSView    *view,
+                                NSEvent   *event,
+                                GtkNSView *ns_view)
+{
+  if (view == ns_view->priv->view)
+    {
+#if 0
+      g_printerr ("native child event on %s\n",
+                  class_getName ([ns_view->priv->view class]));
+#endif
+
+      switch ([event type])
+        {
+        case NSLeftMouseDown:
+          if (! gtk_widget_has_focus (GTK_WIDGET (ns_view)) &&
+
+              /*  other code can set can-focus, so check for both  */
+              gtk_widget_get_can_focus (GTK_WIDGET (ns_view)) &&
+              [ns_view->priv->view acceptsFirstResponder])
+            {
+              NSWindow *ns_window;
+
+#if DEBUG_FOCUS
+              g_printerr ("grabbing focus on %s\n",
+                          class_getName ([ns_view->priv->view class]));
+#endif
+
+              gtk_widget_grab_focus (GTK_WIDGET (ns_view));
+            }
+          break;
+
+        default:
+          break;
+        }
+    }
 }
 
 GtkWidget *
-- 
1.7.5.4

